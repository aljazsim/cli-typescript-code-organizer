import { getClasses, getEnums, getExpressions, getFunctions, getImports, getInterfaces, getTypeAliases, getVariables, groupByPlaceAboveBelow } from "../helpers/node-helper";
import { getFileName, readFile, writeFile } from "../helpers/file-system-helper";
import { getIndentation, organizeTypes } from "./helpers/code-helper";

import { ClassMemberGroupConfiguration } from "../configuration/class-member-group-configuration";
import { ClassMemberType } from "../enums/class-member-type";
import { ClassNode } from "../elements/class-node";
import { Configuration } from "../configuration/configuration";
import { ElementNodeGroup } from "../elements/element-node-group";
import { InterfaceMemberGroupConfiguration } from "../configuration/interface-member-group-configuration";
import { InterfaceMemberType } from "../enums/interface-member-type";
import { InterfaceNode } from "../elements/interface-node";
import { SourceCodeAnalyzer } from "./source-code-analyzer";
import { compareNumbers } from "../helpers/comparing-helper";
import { removeRegions } from "../helpers/region-helper";
import ts from "typescript";

export class SourceCodeOrganizer
{
    public static async organizeSourceCodeFile(sourceCodeFilePath: string, configuration: Configuration)
    {
        const sourceCodeFileName = getFileName(sourceCodeFilePath);
        let sourceCode = "";
        let organizedSourceCode = "";

        try 
        {
            sourceCode = await readFile(sourceCodeFilePath);
        }
        catch
        {
            return;
        }

        try 
        {
            organizedSourceCode = this.organizeSourceCode(sourceCode, sourceCodeFileName, configuration);
        }
        catch
        {
            return;
        }

        if (organizedSourceCode !== sourceCode)
        {
            await writeFile(sourceCodeFilePath, organizedSourceCode);
        }
    }

    public static organizeSourceCode(sourceCodeFileName: string, sourceCode: string, configuration: Configuration)
    {
        const ignoreComment1Regex = new RegExp("//\\s*tsco:ignore");
        const ignoreComment2Regex = new RegExp("//\\s*<auto-generated\\s*/>");

        if (sourceCode &&
            !ignoreComment1Regex.test(sourceCode) &&
            !ignoreComment2Regex.test(sourceCode))
        {
            try 
            {
                return organizeTypes(sourceCode, sourceCodeFileName, configuration);
            }
            catch
            {
            }
        }

        return sourceCode;
    }

    private static organizeClassMembers(classNode: ClassNode, memberTypeOrder: ClassMemberGroupConfiguration[], groupElementsWithDecorators: boolean): ElementNodeGroup[]
    {
        let regions: ElementNodeGroup[] = [];

        for (const memberTypeGroup of memberTypeOrder)
        {
            const placeAbove = memberTypeGroup.placeAbove;
            const placeBelow = memberTypeGroup.placeBelow;
            const memberGroups: ElementNodeGroup[] = [];

            for (const memberType of memberTypeGroup.memberTypes)
            {
                if (memberType === ClassMemberType.privateStaticConstProperties)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPrivateStaticConstProperties(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.privateConstProperties)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPrivateConstProperties(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.privateStaticReadOnlyProperties)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPrivateStaticReadOnlyProperties(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.privateReadOnlyProperties)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPrivateReadOnlyProperties(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.privateStaticProperties)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPrivateStaticProperties(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.privateProperties)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPrivateProperties(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.protectedStaticConstProperties)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getProtectedStaticConstProperties(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.protectedConstProperties)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getProtectedConstProperties(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.protectedStaticReadOnlyProperties)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getProtectedStaticReadOnlyProperties(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.protectedReadOnlyProperties)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getProtectedReadOnlyProperties(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.protectedStaticProperties)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getProtectedStaticProperties(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.protectedProperties)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getProtectedProperties(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.publicStaticConstProperties)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPublicStaticConstProperties(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.publicConstProperties)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPublicConstProperties(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.publicStaticReadOnlyProperties)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPublicStaticReadOnlyProperties(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.publicReadOnlyProperties)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPublicReadOnlyProperties(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.publicStaticProperties)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPublicStaticProperties(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.publicProperties)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPublicProperties(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.staticBlockDeclarations)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], classNode.staticBlockDeclarations, false));
                }
                else if (memberType === ClassMemberType.constructors)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], classNode.getConstructors(), false));
                }
                else if (memberType === ClassMemberType.publicStaticAccessors)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPublicStaticAccessors(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.publicAccessors)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPublicAccessors(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.publicAbstractAccessors)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPublicAbstractAccessors(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.protectedStaticAccessors)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getProtectedStaticAccessors(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.protectedAccessors)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getProtectedAccessors(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.protectedAbstractAccessors)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getProtectedAbstractAccessors(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.privateStaticAccessors)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPrivateStaticAccessors(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.privateAccessors)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPrivateAccessors(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.publicStaticGettersAndSetters)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPublicStaticGettersAndSetters(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.publicGettersAndSetters)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPublicGettersAndSetters(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.publicAbstractGettersAndSetters)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPublicAbstractGettersAndSetters(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.protectedStaticGettersAndSetters)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getProtectedStaticGettersAndSetters(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.protectedGettersAndSetters)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getProtectedGettersAndSetters(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.protectedAbstractGettersAndSetters)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getProtectedAbstractGettersAndSetters(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.privateStaticGettersAndSetters)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPrivateStaticGettersAndSetters(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.privateGettersAndSetters)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPrivateGettersAndSetters(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.publicStaticMethods)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPublicStaticMethods(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.publicMethods)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPublicMethods(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.publicAbstractMethods)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPublicAbstractMethods(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.protectedStaticMethods)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getProtectedStaticMethods(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.protectedMethods)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getProtectedMethods(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.protectedAbstractMethods)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getProtectedAbstractMethods(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.privateStaticMethods)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPrivateStaticMethods(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === ClassMemberType.privateMethods)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(classNode.getPrivateMethods(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
            }

            regions.push(new ElementNodeGroup(memberTypeGroup.caption, memberGroups, [], true));
        }

        return regions;
    }

    private static organizeInterfaceMembers(interfaceNode: InterfaceNode, memberTypeOrder: InterfaceMemberGroupConfiguration[], groupElementsWithDecorators: boolean)
    {
        let regions: ElementNodeGroup[] = [];

        for (const memberTypeGroup of memberTypeOrder)
        {
            const placeAbove = memberTypeGroup.placeAbove;
            const placeBelow = memberTypeGroup.placeBelow;
            const memberGroups: ElementNodeGroup[] = [];

            for (const memberType of memberTypeGroup.memberTypes)
            {
                if (memberType === InterfaceMemberType.properties)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(interfaceNode.getProperties(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === InterfaceMemberType.indexes)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(interfaceNode.getIndexes(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                if (memberType === InterfaceMemberType.gettersAndSetters)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(interfaceNode.getGettersAndSetters(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
                else if (memberType === InterfaceMemberType.methods)
                {
                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(interfaceNode.getMethods(), placeAbove, placeBelow, groupElementsWithDecorators), false));
                }
            }

            regions.push(new ElementNodeGroup(memberTypeGroup.caption, memberGroups, [], true));
        }

        return regions;
    }


}