import { getClasses, getEnums, getExpressions, getFunctions, getImports, getInterfaces, getTypeAliases, getVariables, groupByPlaceAboveBelow } from "../helpers/node-helper";
import { getFileName, readFile, writeFile } from "../helpers/file-system-helper";

import { ClassMemberGroupConfiguration } from "../configuration/class-member-group-configuration";
import { ClassMemberType } from "../enums/class-member-type";
import { ClassNode } from "../elements/class-node";
import { Configuration } from "../configuration/configuration";
import { ElementNode } from "../elements/element-node";
import { ElementNodeGroup } from "../elements/element-node-group";
import { InterfaceMemberGroupConfiguration } from "../configuration/interface-member-group-configuration";
import { InterfaceMemberType } from "../enums/interface-member-type";
import { InterfaceNode } from "../elements/interface-node";
import { ModuleConfiguration } from "../configuration/module-configuration";
import { ModuleMemberGroupConfiguration } from "../configuration/module-member-group-configuration";
import { ModuleMemberType } from "../enums/module-member-type";
import { SourceCodeAnalyzer } from "./source-code-analyzer";
import { SourceCodePrinter } from "./source-code-printer";
import { TypeAliasNode } from "../elements/type-alias-node";
import { compareNumbers } from "../helpers/comparing-helper";
import ts from "typescript";

export class SourceCodeOrganizer
{
    // #region Public Static Methods (3)

    public static organizeSourceCode(sourceCode: string, configuration: Configuration)
    {
        const ignoreComment1Regex = new RegExp("//\\s*tsco:ignore");
        const ignoreComment2Regex = new RegExp("//\\s*<auto-generated\\s*/>");

        if (sourceCode &&
            !ignoreComment1Regex.test(sourceCode) &&
            !ignoreComment2Regex.test(sourceCode))
        {
            try 
            {
                let sourceCodeWithoutRegions = SourceCodePrinter.removeRegions(sourceCode); // strip regions, they will get re-generated
                let sourceFile = ts.createSourceFile("temp.ts", sourceCodeWithoutRegions, ts.ScriptTarget.Latest, false, ts.ScriptKind.TS);
                let elements = SourceCodeAnalyzer.getNodes(sourceFile, configuration.classes.treatArrowFunctionPropertiesAsMethods);
                let topLevelGroups = this.organizeModuleMembers(elements, configuration);

                return SourceCodePrinter.print(sourceCode, topLevelGroups, configuration);
            }
            catch
            {
            }
        }

        return sourceCode;
    }

    public static async organizeSourceCodeFile(sourceCodeFilePath: string, configuration: Configuration)
    {
        let sourceCode = "";
        let organizedSourceCode = "";

        try 
        {
            sourceCode = await readFile(sourceCodeFilePath);
        }
        catch
        {
            return;
        }

        try 
        {
            organizedSourceCode = this.organizeSourceCode(sourceCode, configuration);
        }
        catch
        {
            return;
        }

        if (organizedSourceCode !== sourceCode)
        {
            await writeFile(sourceCodeFilePath, organizedSourceCode);
        }
    }

    // #endregion Public Static Methods (3)

    // #region Private Static Methods (1)

    private static organizeModuleMembers(elements: ElementNode[], configuration: Configuration)
    {
        let regions: ElementNodeGroup[] = [];
        const imports = getImports(elements);
        const interfaces = getInterfaces(elements);
        const classes = getClasses(elements, configuration.classes.groupMembersWithDecorators);
        const types = getTypeAliases(elements);
        const enums = getEnums(elements);
        const functions = getFunctions(elements, configuration.classes.treatArrowFunctionPropertiesAsMethods, false);
        const exportedFunctions = getFunctions(elements, configuration.classes.treatArrowFunctionPropertiesAsMethods, true);
        const constants = getVariables(elements, true, false, configuration.classes.treatArrowFunctionPropertiesAsMethods ? false : null);
        const exportedConstants = getVariables(elements, true, true, configuration.classes.treatArrowFunctionPropertiesAsMethods ? false : null);
        const variables = getVariables(elements, false, false, null);
        const exportedVariables = getVariables(elements, false, true, null);
        let expressions = getExpressions(elements);

        if (imports.length > 0)
        {
            regions.push(new ElementNodeGroup("Imports", [], imports, false));
        }

        if (configuration.modules.order)
        {
            for (const memberTypeGroup of configuration.modules.groups)
            {
                const placeAbove = memberTypeGroup.placeAbove;
                const placeBelow = memberTypeGroup.placeBelow;
                const memberGroups: ElementNodeGroup[] = [];

                for (const memberType of memberTypeGroup.memberTypes)
                {
                    let elementNodes = Array<ElementNode>();

                    if (memberType === ModuleMemberType.enums)
                    {
                        elementNodes = enums;
                    }
                    else if (memberType === ModuleMemberType.types)
                    {
                        elementNodes = types;
                    }
                    else if (memberType === ModuleMemberType.interfaces)
                    {
                        elementNodes = interfaces;
                    }
                    else if (memberType === ModuleMemberType.classes)
                    {
                        elementNodes = classes;
                    }
                    else if (memberType === ModuleMemberType.functions)
                    {
                        elementNodes = functions;
                    }
                    else if (memberType === ModuleMemberType.exportedFunctions)
                    {
                        elementNodes = exportedFunctions;
                    }
                    else if (memberType === ModuleMemberType.exportedConstants)
                    {
                        elementNodes = exportedConstants;
                    }
                    else if (memberType === ModuleMemberType.constants)
                    {
                        elementNodes = constants;
                    }
                    else if (memberType === ModuleMemberType.exportedVariables)
                    {
                        elementNodes = exportedVariables;
                    }
                    else if (memberType === ModuleMemberType.variables)
                    {
                        elementNodes = variables;
                    }

                    memberGroups.push(new ElementNodeGroup(null, [], groupByPlaceAboveBelow(elementNodes, placeAbove, placeBelow, false), false));
                }

                regions.push(new ElementNodeGroup(memberTypeGroup.caption, memberGroups, [], true));
            }
        }
        else
        {
            regions.push(new ElementNodeGroup(null, [], elements, false));
        }

        return regions;
    }

    // #endregion Private Static Methods (1)
}